<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="FB_GHT" Id="{5fc93799-b59d-4881-8519-31528cdb8961}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GHT IMPLEMENTS IGHT
VAR CONSTANT
	MAX_HASH_LISTS: INT := 3;
	MAX_HASHLIST_ENTRIES: INT := 50;
	CUTOFF_A: ULINT := 4000000000;
	CUTOFF_B: ULINT := 8000000000;
END_VAR
VAR
	m_bolDeleteItems: BOOL;
	m_uintCount: UINT;
	m_fbHashTable: ARRAY[0..(MAX_HASH_LISTS - 1)] OF FB_HashTableCtrl;
	m_hHashTable: ARRAY[0..(MAX_HASH_LISTS - 1)] OF T_HHASHTABLE;
	m_uliCutoff: ARRAY[0..(MAX_HASH_LISTS - 1)] OF ULINT;
	m_aHashTableBuffer: ARRAY[0..(MAX_HASH_LISTS - 1)] OF T_GHTHashTableBuffer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Initialize" Id="{0336c1c6-f7c9-4002-be52-df05995f570d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Initialize'}
METHOD Initialize : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_CreateHashTableHnd( ADR( m_aHashTableBuffer[0].aBuffer ), SIZEOF( m_aHashTableBuffer[0].aBuffer ), m_hHashTable[0] );
F_CreateHashTableHnd( ADR( m_aHashTableBuffer[1].aBuffer ), SIZEOF( m_aHashTableBuffer[1].aBuffer ), m_hHashTable[1] );
F_CreateHashTableHnd( ADR( m_aHashTableBuffer[2].aBuffer ), SIZEOF( m_aHashTableBuffer[2].aBuffer ), m_hHashTable[2] );]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTableIdx" Id="{09ca6dcb-987c-4d42-8b96-19c06e3478a4}">
      <Declaration><![CDATA[{attribute 'object_name' := 'GetTableIdx'}
METHOD PRIVATE GetTableIdx : INT
VAR_INPUT
	uliBarcode: ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF uliBarcode < CUTOFF_A THEN
	GetTableIdx := 0;
	RETURN;
END_IF

IF uliBarcode > CUTOFF_B THEN
	GetTableIdx := 2;
	RETURN;
END_IF

GetTableIdx := 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Lookup" Id="{2def6ec0-4b2a-428b-94f6-45a08f854035}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Lookup'}
METHOD Lookup : POINTER TO BYTE
VAR_INPUT
	uliKey: ULINT;
	bolRemove: BOOL;
END_VAR
VAR
	pfbHashTable: POINTER TO FB_HashTableCtrl;
	phHashTable: POINTER TO T_HHASHTABLE;
	uliCutoff: ULINT;
	iIdx: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iIdx := GetTableIdx(uliKey);

m_fbHashTable[iIdx].A_Lookup( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), hTable := m_hHashTable[iIdx] );

IF m_fbHashTable[iIdx].bOk THEN
	Lookup := m_fbHashTable[iIdx].getValue;
	
	IF bolRemove THEN
		m_fbHashTable[iIdx].A_Remove( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), hTable := m_hHashTable[iIdx]);

		IF m_fbHashTable[iIdx].bOk THEN
			m_uintCount := m_uintCount - 1;
		END_IF
	END_IF
ELSE
	Lookup := NULL;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{3d2a6613-61e7-4aa3-a43d-387d1f7abc12}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Clear'}
METHOD Clear : BOOL
VAR_INPUT
	bolFreePointer: BOOL;
END_VAR
VAR
	iIdx: INT;
	pData: POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR iIdx := 0 TO MAX_HASH_LISTS - 1 DO
	IF bolFreePointer THEN
		m_fbHashTable[iIdx].A_GetFirst(hTable := m_hHashTable[iIdx]);

		WHILE m_fbHashTable[iIdx].bOk DO
			pData := m_fbHashTable[iIdx].getValue;
			__DELETE(pData);
			m_fbHashTable[iIdx].A_GetNext(hTable := m_hHashTable[iIdx]);
		END_WHILE
		
	END_IF
	
	m_fbHashTable[iIdx].A_RemoveAll(hTable := m_hHashTable[iIdx]);
END_FOR

m_uintCount := 0;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{433155fa-6112-401f-b8d1-d77b227b2a11}">
      <Declaration><![CDATA[PROPERTY Count : UINT
]]></Declaration>
      <Get Name="Get" Id="{45d50c32-fda3-4a30-8b05-cf8b21587443}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{6a9ca31b-8927-45a6-be2a-7d2eb3da089b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_uliCutoff[0] := 0;
m_uliCutoff[1] := CUTOFF_A;
m_uliCutoff[2] := CUTOFF_B;

m_uintCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddItem" Id="{95001f02-dd04-4de2-9fda-bab23f9d6e54}">
      <Declaration><![CDATA[{attribute 'object_name' := 'AddItem'}
METHOD AddItem : BOOL
VAR_INPUT
	uliKey: ULINT;
	pData: POINTER TO BYTE;
END_VAR
VAR
	iIdx: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iIdx := GetTableIdx(uliKey);

m_fbHashTable[iIdx].A_Add( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), putValue := pData, hTable := m_hHashTable[iIdx] );

IF m_fbHashTable[iIdx].bOk THEN
	m_uintCount := m_uintCount + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>