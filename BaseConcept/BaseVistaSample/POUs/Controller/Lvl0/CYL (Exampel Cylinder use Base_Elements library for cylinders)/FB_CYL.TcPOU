<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.19">
  <POU Name="FB_CYL" Id="{737d0ef7-e1b0-4ebc-93e3-5294ee4a3127}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CYL EXTENDS FB_CtrlBase

VAR_INPUT
	In_bolRetracted: BOOL;
	In_bolExtended: BOOL;
END_VAR
VAR_OUTPUT
	Out_bolRetract: BOOL;
	Out_bolExtend: BOOL;
END_VAR

VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_CYL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Cylinder implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		25.04.2013		AVME/KVO	Start history
0.00.2		03.07.2013		AVME/KVO	Always call Super.always, no change to off when switch to automatic
										alarm evt EOFF, OFF or cmd off detection in Always
0.00.3		05.11.2013		AVME/KVO	integrate in BaseElements library, 
										FB alarm pointer used, alarm definition over ENUM
0.00.4		05.11.2013		AVME/KVO	this controller is only an example for a level0 controller
										use Base_Elements library for cylinder/valve implementations
___________________________________________________________________________________________________*)


IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
]]></ST>
    </Implementation>
    <Method Name="sta_RETRACTBusy" Id="{49759eab-4a0b-44af-ba4f-190d63c6d182}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RETRACTBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.bolExtend.intern := FALSE;
		SIf.Out.bolRetract.intern := TRUE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimRetractTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolRetracted.intern := TRUE;
				SIf.In.bolExtended.intern := FALSE;
			END_IF
		END_IF
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms>SIf.Par.udiRetractTime_ms) THEN
			IF (SIf.In.bolExtended.intern) THEN
				// sensor extend always on 
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout retract cylinder
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolRetracted.intern) AND(SIf.In.bolExtended.intern=FALSE) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACT;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeRetract := me.StateMachine.udiTimeInState_ms;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{4ffaf879-3ba6-4f07-861c-fe09e9967dd0}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    CYL_CmdState.cSTA_RETRACTBusy: 
        THIS^.sta_RETRACTBusy();
    CYL_CmdState.cSTA_RETRACT: 
        THIS^.sta_RETRACT();
    CYL_CmdState.cSTA_EXTENDBusy: 
        THIS^.sta_EXTENDBusy();
    CYL_CmdState.cSTA_EXTEND: 
        THIS^.sta_EXTEND();
	cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    cSTA_STOP: 
        THIS^.sta_STOP();
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{eb929956-f658-49d3-b05f-2071ebdcc2c8}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PON : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := cSTA_RETRACTBusy;
		ELSIF (me.intCmd=cCMD_EXTEND) THEN
			me.StateMachine.intStateNext := cSTA_EXTENDBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{b8510dd4-13c9-4fbe-b96c-0becef1f2fd5}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_EXTENDBusy" Id="{3b168bb9-a863-4bc6-ae4b-3b0e9b16e776}">
      <Declaration><![CDATA[METHOD PROTECTED sta_EXTENDBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimExtendTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolExtended.intern := TRUE;
				SIf.In.bolRetracted.intern := FALSE;
			END_IF
		END_IF
		
		//no change action
		SIf.Out.bolExtend.intern := TRUE;
		SIf.Out.bolRetract.intern := FALSE;
		
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms>SIf.Par.udiExtendTime_ms) THEN
			IF (SIf.In.bolRetracted.intern) THEN
				// sensor retract always on
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout extend
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolExtended.intern) AND (SIf.In.bolRetracted.intern=FALSE) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTEND;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeExtend := me.StateMachine.udiTimeInState_ms;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{322bdbb7-0b7f-4ad4-8eab-2577b3fb486a}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass<>E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass<>E_AlmClass.OFF) THEN
			IF (me.intCmd=cCMD_STOP) THEN
				// sensor retract always on cylinder
				me.StateMachine.intStateNext :=  cSTA_STOPBusy;
			ELSIF (me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN 
				me.StateMachine.intStateNext := cSTA_EXTENDBusy;
			ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
				me.StateMachine.intStateNext := cSTA_RETRACTBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_EXTEND" Id="{7a9aba2f-5635-4f1c-a39a-c1b3d993f846}">
      <Declaration><![CDATA[METHOD PROTECTED sta_EXTEND : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolRetracted.intern) THEN
			// sensor retract always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolExtended.intern = FALSE) THEN // wait time until error?
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{61b9299d-71ce-459d-8978-132e921106a2}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory<=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=cCMD_STOP) THEN
				me.StateMachine.intStateNext := cSTA_STOPBusy;
			ELSIF(me.intCmd=cCMD_RETRACT) THEN
				me.StateMachine.intStateNext := cSTA_RETRACTBusy;
			ELSIF(me.intCmd=cCMD_EXTEND) THEN
				me.StateMachine.intStateNext := cSTA_EXTENDBusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{1a1841f5-d9d3-4cec-abb4-aa384c6b5472}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.bolExtended.map := THIS^.In_bolExtended;
SIf.In.bolRetracted.map := THIS^.In_bolRetracted;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolExtended));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolRetracted));
ELSE
	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{3f83ecbc-a282-4f17-8fc6-7079c773506d}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// switch off?
		IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
			OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
			// monostabil valve -> do nothing
			;
		ELSE
			// bistable valve -> switch both off
			SIf.Out.bolExtend.intern := FALSE;
			SIf.Out.bolRetract.intern := FALSE;
		END_IF
		
		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{30e501b6-8c97-4304-a96a-42e63b787840}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_CYL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{3cc12842-92b2-40e3-acee-7144bf90e142}">
      <Declaration><![CDATA[METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			CYL_CmdState.cCMD_RETRACT: 
				getCmdState := 'cCMD_RETRACT';
			CYL_CmdState.cCMD_EXTEND: 
				getCmdState := 'cCMD_EXTEND';
		ELSE
			getCmdState := 'Cmd not defined';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			CYL_CmdState.cSTA_RETRACTBusy: 
				getCmdState := 'cSTA_RETRACTBusy';
			CYL_CmdState.cSTA_RETRACT: 
				getCmdState := 'cSTA_RETRACT';
			CYL_CmdState.cSTA_EXTENDBusy: 
				getCmdState := 'cSTA_EXTENDBusy';
			CYL_CmdState.cSTA_EXTEND: 
				getCmdState := 'cSTA_EXTEND';
		ELSE
			getCmdState := 'State not defined';
		END_CASE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOPBusy" Id="{793279a7-f53f-4c40-9ff7-e53abf833e13}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STOPBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// switch off?
		IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
			OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
			// monostabil valve -> do nothing
			;
		ELSE
			// bistable valve -> switch both on -> block at position
			SIf.Out.bolExtend.intern := TRUE;
			SIf.Out.bolRetract.intern := TRUE;
		END_IF
		
		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_STOP;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{6cfa0fd4-0741-4a03-8098-1e8615c9dfcb}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	ii: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

CIf.Job.aCmdList[ii].intCmd := cCMD_STOP;
CIf.Job.aCmdList[ii].strName := 'Stop'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_RETRACT;
CIf.Job.aCmdList[ii].strName := 'Retract';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_EXTEND; // for test simulation single answer
CIf.Job.aCmdList[ii].strName := 'Extend';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_CYL'; 

// set alarm class
SIf.Alm[E_ALM_CYL.SensorRetractAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorRetractAlwaysOn].strText := 'sensor retract always on'; 
SIf.Alm[E_ALM_CYL.SensorExtendNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorExtendNotReached].strText := 'timeout extend - sensor extend not reached';
SIf.Alm[E_ALM_CYL.SensorExtendAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorExtendAlwaysOn].strText := 'sensor extend always on';
SIf.Alm[E_ALM_CYL.SensorRetractNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorRetractNotReached].strText := 'timeout retract - sensor retract not reached';
SIf.Alm[E_ALM_CYL.InterlockExtend].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_CYL.InterlockExtend].strText := 'interlock extend - movement stopped';
SIf.Alm[E_ALM_CYL.InterlockRetract].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_CYL.InterlockRetract].strText := 'interlock retract - movement stopped';

//*******************************************************************************
// initial values
//*******************************************************************************

// Configuration defaults of class
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Parameter defaults of class
SIf.Par.udiExtendTime_ms := 10000;
SIf.Par.udiRetractTime_ms := 8000;
SIf.Par.udiSimExtendTime_ms := SIf.Par.udiExtendTime_ms/2;	
SIf.Par.udiSimRetractTime_ms := SIf.Par.udiRetractTime_ms/2;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOP" Id="{949b2121-4415-435d-9934-8162cf92f3de}">
      <Declaration><![CDATA[METHOD PROTECTED sta_STOP : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN 
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{9eb7dfbc-a97c-4a98-8041-59ed784bdd31}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolExtend));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolRetract));
	
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		bolSwitchValvesOff := FALSE;
		
		IF (SIf.Ilk.bolExtend=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
				// monostabil valve -> do nothing
			ELSE
				// bistable valve ->  switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolExtend.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.InterlockExtend,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF
			END_IF
		END_IF
		
		IF (SIf.Ilk.bolRetract=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
				// monostabil valve -> do nothing
				;
			ELSE
				// bistable valve -> switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolRetract.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.InterlockRetract,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF;
			END_IF
		END_IF
		
		// bistable valve -> switch both off
		IF (bolSwitchValvesOff) THEN
			SIf.Out.bolExtend.map := FALSE;
			SIf.Out.bolRetract.map := FALSE;
		END_IF
		
	END_IF

	THIS^.Out_bolExtend := SIf.Out.bolExtend.map;
	THIS^.Out_bolRetract := SIf.Out.bolRetract.map;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RETRACT" Id="{ca69179f-e0cb-4219-bf7a-eda5c31eaab5}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RETRACT : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolExtended.intern) THEN
			// sensor retract always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolRetracted.intern = FALSE) THEN // wait time until error?
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{f991da10-5343-4634-b55a-33f8f2d15035}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE; // for cylinder no change to off when switch to automatic!!
END_IF

SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>