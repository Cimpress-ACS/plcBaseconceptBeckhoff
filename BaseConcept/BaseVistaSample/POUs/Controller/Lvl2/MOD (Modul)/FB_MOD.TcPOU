<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_MOD" Id="{ce39c9c5-f1f6-48a4-885d-15a7f8be770f}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MOD EXTENDS FB_CtrlBase
VAR_INPUT
	///pointer to function block
	In_p_fbHOR: POINTER TO FB_CYL;
	///pointer to function block
	In_p_fbVER: POINTER TO FB_CYL;
END_VAR
VAR
	///Specific interface struct for public access
	SIf: T_Ctrl_SIf_MOD;
	pHOR_CIF: POINTER TO T_Ctrl_CIf;
	pVER_CIF: POINTER TO T_Ctrl_CIf;
	bolfpCmd: BOOL;
	
	// Data Channel To LineControl  test
	fbDtChnToLine_Test : FB_DtChnToLine_Test;
	
	// Data Channel To PLC  test
	intLastReadData : DINT;
	
	intStatemachine : INT;			// State of the Communication Statemachine
	bolDataBad: BOOL;				// Data not correct
	intCountRetry: INT;				// Retry Counts for error message
	intIndexOldest : INT;			// Temporary Index saved
	dtOldestTag : DATE_AND_TIME;	// Date and time of the oldes imput
	
END_VAR
VAR CONSTANT
	// ctrl specific substates definitions
	cSUB_INITIALIZED: INT := 301;
	cSUB_VER_Up: INT := 302;
	cSUB_VER_Down: INT := 303;
	cSUB_WAIT_Pick: INT := 304;
	cSUB_HOR_MoveToPlace: INT := 305;
	cSUB_HOR_MoveToPick: INT := 306;
	cSUB_Finished: INT := 307;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
This controller is an example of a level 2 modul controller. It has two cylinder FUB as childs. 
One is for up and down and the other is for a movement horizontal.(pick and place)


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		02.05.2013		AVME/KVO	Start history
0.00.2		03.07.2013		AVME/KVO	Always call Super.always

___________________________________________________________________________________________________*)

SUPER^();]]></ST>
    </Implementation>
    <Method Name="sta_ERRORQuit" Id="{06630e5b-a1d1-445c-ae3c-6895aea5b0cc}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			// State Change Condition
			IF (me.StateMachine.intStateHistory<=cSTA_PON) OR (me.intCmd=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd<>cCMD_DONE) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{1f9de034-dff8-477f-b9a8-1c73db7b3b29}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		me.SubStateMachine.intState := cSUB_INITIALIZED; // init sub state machine
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// no change action
		
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			cSUB_INITIALIZED:
					// State Change Condition
					IF(TRUE) THEN
						me.SubStateMachine.intStateNext := cSUB_VER_Down;
					END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_VER_Down:
					pVER_CIF^.Job.intACmd := CYL_CmdState.cCMD_EXTEND; // move to position down
					
					// State Change Condition
					IF (pVER_CIF^.Job.intState=CYL_CmdState.cSTA_EXTEND) AND (pHOR_CIF^.Job.intState=CYL_CmdState.cSTA_RETRACT) THEN // pick position
						me.SubStateMachine.intStateNext := cSUB_WAIT_Pick;
					ELSIF (pVER_CIF^.Job.intState=CYL_CmdState.cSTA_EXTEND) THEN // place position
						me.SubStateMachine.intStateNext := cSUB_VER_Up;
					END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_WAIT_Pick:
	
					// State Change Condition
					IF(me.SubStateMachine.udiTimeInState_ms>=SIf.Par.udiWaitPick_ms) THEN
						me.SubStateMachine.intStateNext := cSUB_VER_Up;
					END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_VER_Up:
					pVER_CIF^.Job.intACmd := CYL_CmdState.cCMD_RETRACT; // move to position up
					
					// State Change Condition
					IF (pVER_CIF^.Job.intState=CYL_CmdState.cSTA_RETRACT) AND (pHOR_CIF^.Job.intState=CYL_CmdState.cSTA_RETRACT) THEN // pick position
						me.SubStateMachine.intStateNext := cSUB_HOR_MoveToPlace;
					ELSIF (pVER_CIF^.Job.intState=CYL_CmdState.cSTA_RETRACT) THEN // place position
						me.SubStateMachine.intStateNext := cSUB_HOR_MoveToPick;
					END_IF		
					
			//--------------------------------------------------------------------------------------
			cSUB_HOR_MoveToPlace:
					pHOR_CIF^.Job.intACmd := CYL_CmdState.cCMD_EXTEND; // move to position place
					
					// State Change Condition
					IF(pHOR_CIF^.Job.intState=CYL_CmdState.cSTA_EXTEND) THEN
						me.SubStateMachine.intStateNext := cSUB_VER_Down;
					END_IF
					
			//--------------------------------------------------------------------------------------
			cSUB_HOR_MoveToPick:
					pHOR_CIF^.Job.intACmd := CYL_CmdState.cCMD_RETRACT; // move to position pick	
					
					// State Change Condition
					IF(pHOR_CIF^.Job.intState=CYL_CmdState.cSTA_RETRACT) THEN
						me.SubStateMachine.intStateNext := cSUB_Finished;
					END_IF
			//--------------------------------------------------------------------------------------
			cSUB_Finished:
					;			
		END_CASE
		
		// State Change Condition
		IF(me.intCmd=cCMD_INIT) THEN
			me.StateMachine.intStateNext := cSTA_INITBusy;
		ELSIF (me.SubStateMachine.intState=cSUB_Finished) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF

	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		SIf.Cur.udiCycleTime_ms := me.StateMachine.udiTimeInState_ms;
		CIf.Job.strSubState := '';
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{2c870b32-2bc2-4544-82fa-e278fa972b09}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	// Communication to the Line Controll over Data Channel
	THIS^.DtChnToPlc_Test();
	THIS^.fbDtChnToLine_Test.p_stTest_DtChnToLine := ADR(SIf.DtChnToLine);
	THIS^.fbDtChnToLine_Test();
	
	// ----------------------------------------------------------------------------------
	// overrule error always from base -> no EOFF State!! in EOFF go to OFF
	IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
		IF (me.StateMachine.intState=cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSE // stay in OFF
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF
	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{554a885b-1a88-4e25-ad93-41fdf24e80f8}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	ii: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cSTA_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

CIf.Job.aCmdList[ii].intCmd := cCMD_INIT;
CIf.Job.aCmdList[ii].strName := 'Init';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_MOD'; 

// set alarm class
SIf.Alm[E_ALM_MOD.NotUsed1].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed1].strText := 'not used';
SIf.Alm[E_ALM_MOD.NotUsed2].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed2].strText := 'not used';
SIf.Alm[E_ALM_MOD.NotUsed3].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed3].strText := 'not used';
SIf.Alm[E_ALM_MOD.NotUsed4].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed4].strText := 'not used';
SIf.Alm[E_ALM_MOD.NotUsed5].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed5].strText := 'not used';
SIf.Alm[E_ALM_MOD.NotUsed6].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[E_ALM_MOD.NotUsed6].strText := 'not used';
SIf.Alm[E_ALM_MOD.DataChannel_ReceiveData].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_MOD.DataChannel_ReceiveData].strText := 'Data Channel Error Receive Data';

// Configuration defaults of class
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Parameter defaults of class
SIf.Par.udiWaitPick_ms := 15000;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{69ddae28-18e7-4977-bc9f-09a5ed0469e4}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUN : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		bolfpCmd := FALSE; // reset flag positive edge of run command
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		IF (bolfpCmd=FALSE) AND (me.intCmd<>cCMD_RUN) THEN
			bolfpCmd := TRUE;
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cCMD_INIT) THEN
			me.StateMachine.intStateNext := cSTA_INITBusy;
		ELSIF (me.intCmd=cCMD_RUN) AND (bolfpCmd=TRUE) THEN // command RUN and positive flag command was onetime <> RUN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{8030e771-ed10-4085-957e-9f186f9cfcc1}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_CYL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_INITBusy" Id="{88e407a8-e2cd-48ba-9f7d-666f33f6c29a}">
      <Declaration><![CDATA[METHOD PROTECTED sta_INITBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// no change action
		IF (pVER_CIF^.Job.intState = cSTA_RETRACT) THEN
			pHOR_CIF^.Job.intACmd := cCMD_RETRACT; // go to home position of horizontal cylinder
		ELSE
			pVER_CIF^.Job.intACmd := cCMD_RETRACT; // cylinder move up, 
			// problem command could not set in entry because if VER in manual moved  during this step to extend....
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		ELSIF (pVER_CIF^.Job.intState = cSTA_RETRACT) AND (pHOR_CIF^.Job.intState = cSTA_RETRACT) THEN
			me.StateMachine.intStateNext := cSTA_INIT;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{951b3bca-0a64-4af0-b5fe-69f84406a6ce}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF ((me.Alarm.eActivAlmClass<>E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass<>E_AlmClass.OFF)) THEN
			// enable start - no important error active
			IF(me.intCmd=cCMD_INIT) THEN
				me.StateMachine.intStateNext := cSTA_INITBusy;
			ELSIF(me.intCmd=cCMD_RUN) THEN
				me.StateMachine.intStateNext := cSTA_INITBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{a6df9459-5ede-42c8-953e-cda916db252b}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// no action needed
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{bd89ff8b-1c0d-40eb-a1ec-514d6a65e3ac}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_INIT" Id="{c042c768-acb4-4558-9397-006a2e69db61}">
      <Declaration><![CDATA[METHOD PROTECTED sta_INIT : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF

		// State Change Condition
		IF(me.intCmd=cCMD_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{c802ac33-3cac-4bf2-ad0b-3593f6ab5767}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    cSTA_INITBusy: 
        THIS^.sta_INITBusy();
    cSTA_INIT: 
        THIS^.sta_INIT();
    cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{d582d51e-d666-468c-a9fc-fe9eb7059b4e}">
      <Declaration><![CDATA[METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		//CASE intCmdState OF
		//	; 
		//ELSE
			getCmdState := 'Cmd not defined';
		//END_CASE;
	ELSE
	
	// state's
		CASE intCmdState OF
			// substates
			cSUB_INITIALIZED: 
				getCmdState := 'cSUB_INITIALIZED';
			cSUB_VER_Up: 
				getCmdState := 'cSUB_VER_Up';
			cSUB_VER_Down: 
				getCmdState := 'cSUB_VER_Down';
			cSUB_WAIT_Pick: 
				getCmdState := 'cSUB_WAIT_Pick';
			cSUB_HOR_MoveToPlace: 
				getCmdState := 'cSUB_HOR_MoveToPlace';
			cSUB_HOR_MoveToPick: 
				getCmdState := 'cSUB_HOR_MoveToPick';
			cSUB_Finished: 
				getCmdState := 'cSUB_Finished';
		ELSE
			getCmdState := 'State not defined';
		END_CASE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{fa45c37c-8fb5-43fd-999f-238e463548c4}">
      <Declaration><![CDATA[METHOD PUBLIC CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

// add child done?
pHOR_CIF := THIS^.AddChild(In_p_fbHOR^);
pVER_CIF := THIS^.AddChild(In_p_fbVER^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="DtChnToPlc_Test" Id="{fc488651-8c69-4492-bec7-b1190b1bdfcb}">
      <Declaration><![CDATA[METHOD DtChnToPlc_Test : BOOL
VAR_INPUT
END_VAR

VAR CONSTANT
	cSTA_SUB_Data_Init: INT := 900;
	cSTA_SUB_Data_WaitForJob: INT := 902;
	cSTA_SUB_Data_CheckData: INT := 904;
	cSTA_SUB_Data_Acknowledge: INT := 906;
	cSTA_SUB_Data_Retry: INT := 908;
	cSTA_SUB_Data_Error: INT := 910;
	
	cDataState_DONE: INT := -1;
	cDataState_Ready : INT := 1;
	cDataState_Retry : INT := -99;
	cDataState_Error : INT := -100;
	
	cMAX_RETRY : INT := 10;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Data Channel to Receive Data from Line Controller
// Startup check States
IF intStatemachine < cSTA_SUB_Data_Init THEN
	intStatemachine := cSTA_SUB_Data_Init;
END_IF

CASE intStatemachine OF
	cSTA_SUB_Data_Init:
		IF CIf.Job.intState > cSTA_PON THEN
			intCountRetry := 0;
			SIf.DtChnToPLC.intDataState := cDataState_DONE;
			intStatemachine := cSTA_SUB_Data_WaitForJob;
		END_IF
		
	cSTA_SUB_Data_WaitForJob:
		// New data arrived
		IF SIf.DtChnToPLC.intDataState = cDataState_Ready THEN
			bolDataBad := FALSE;
			//dtOldestTag := dtActualTime;
			intIndexOldest := -1;			// -1 = no Oldest free input found
			intStatemachine := cSTA_SUB_Data_CheckData;
		END_IF
	
	cSTA_SUB_Data_CheckData:	
		// Check Data
		//IF stDataChannelTest_DtChnToPlc.stDecision.uliRFID <= 0 THEN
		//		bolDataBad := TRUE;
		//		// Set Alarm: SIf.Alm[3].strText := 'False Job Parameter';
		//		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);					
		//END_IF
 
		// ------------------------------------------------------------------------------------
		// Data Use
		IF bolDataBad = TRUE THEN
			IF intCountRetry >= cMAX_RETRY THEN
				intStatemachine := cSTA_SUB_Data_Error;
			ELSE
				intCountRetry := intCountRetry + 1;
				intStatemachine := cSTA_SUB_Data_Retry;
			END_IF
		ELSE
			// Reset counter because right job
			intCountRetry := 0;

			// do something here
			intLastReadData := SIf.DtChnToPLC.dinTest;
			
			intStatemachine := cSTA_SUB_Data_Acknowledge;
			
			// send value back to LineControl multiplied with 2 (just for testing)
			fbDtChnToLine_Test.Create(In_Test := (intLastReadData * 2));
			
		END_IF
		
	cSTA_SUB_Data_Acknowledge:	
		// Delete all values
		SIf.DtChnToPLC.dinTest := 0;
		// Acknowledge communication
		SIf.DtChnToPLC.intDataState := cDataState_DONE;
		intStatemachine := cSTA_SUB_Data_WaitForJob;
		
	cSTA_SUB_Data_Retry:
		SIf.DtChnToPLC.intDataState := cDataState_Retry;
		intStatemachine := cSTA_SUB_Data_WaitForJob;

	cSTA_SUB_Data_Error:
		SIf.DtChnToPLC.intDataState := cDataState_Error;
		// Set Alarm: SIf.Alm[7].strText := 'Data Channel Error Receive Dat
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.DataChannel_ReceiveData,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);										
		IF CIf.Job.bolAlmReset = TRUE THEN
			intStatemachine := cSTA_SUB_Data_Init;
		END_IF
			
END_CASE]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>